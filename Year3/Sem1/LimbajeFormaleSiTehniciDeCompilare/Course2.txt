Course 2________________________________________________________________

Classes of tokens:
	Identifiers
	Constants
	Reservwed words(keywords)
	Separators
	Operators

If a token can NOT be classified --> LEXICAL ERROR


Codify___________________________________________________________________

May be codification table
	OR
cod for identifiers and constants

identifiers , constant --> Symbol Table(ST)

PIF == Program Internal Form == array of pairs

pairs(token,position in ST)


Remarks_________________________________________________________________

genPIF = adds a pair (token, position) to PIF

Comments are eliminated

Most important operations : SEARCH and INSERT


SYMBOL TABLE__________________________________________________________

Definiton -> contains all information collected during compiling regarding
	     the symbolic names from the source cod


Variants:
	Unique symbol table – contains all symbolic names
	Distinct symbol tables: IT (identifiers table) + CT (constants
table)


ST Organization:
		1. Unsorted table
		2. Sorted table:alphabetic(numeric)
		3. Binary search tree(balanced)
		4. Hash table


_________________Formal Languages____________________________________ 
		  basic notions


Example:
	a boy has a dog

S --> Pv				A --> α = rule
P --> a N				S,P,V,N,Q,C,B --> nonterminal symbols
N --> boy or N --> dog			a,boy,dog,has --> terminal symbols
		(N --> boy|dog)		Remarks:
V --> QC					1.Sentence = 										word,sequence;denoted w
Q --> has					2. S=>PV=>a NV=>a NQC=>a N has C
C --> BN					   - sentential form
B --> a						3. The rule guarantees 								   syntactical correctness,
						   but not the semantical 							   correctness (A dog has a boy)


Grammar________________________________________________________


Definition : A (formal) grammar is a 4-tuple: G=(N,Σ,P,S)
	     with the following meanings: 

N - set of nonterminal symbols 
Σ - set of terminal symbols
P - finite set of production(rules)
S∈N – start symbol /axiom


Binary relations defined on (N ∪ Σ)
	1. Direct Derivation
	2. k derivation
	3. + derivation
	4. * derivation


Definiton: Two grammar G1 and G2 are equivalent if they generate the same 		   language L(G1)=L(G2)
	  
	   Language generated by a grammar G=(N,Σ,P,S) is:
	   L(G)={w∈Σ∗ | S ⇒ w} 


Chomsky hierarchy:
	type 0: no restriction
	type 1: context dependent grammar
	type 2: xcontext free grammar
	type 3: regular grammar
		
		Remark: type 3 ⊆ type 2 ⊆ type 1 ⊆ type 0











